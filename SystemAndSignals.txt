What is a System?
A system is a group of components that work together to perform a specific functionality.

System Structure:
A system can be represented as:
G = (C, L)
Where:
- C is the set of components, e.g., {C0, C1, ..., CN}.
- L is the set of connections, e.g., {L1, L2, ..., LN}.

What is a Function?
A function defines a specific operation that a system can perform, based on inputs. For example, in a basic calculator:

1. Analysis:
   We identify the operations our calculator should support (e.g., addition, subtraction, multiplication, division). For each operation, we define the inputs and outputs. For now, we'll use two inputs for simplicity.

2. Synthesis:
   Design the system to perform the operations based on the analysis. For instance:
   - f(sum) = a + b
   - f(multiply) = a * b
   - f(divide) = a / b
   - f(subtract) = a - b

From these functions, we can determine the necessary components: inputs, operators, and outputs.

System Design: Structure and Behavior
A system consists of:
- Structure: How the system is built (components and connections).
- Behavior: What functionality the system performs, i.e., the purpose of the system, which is defined by the functions it supports.

Steps in System Design
1. Analysis: Understand and determine the required behavior of the system (what the system should do).
2. Synthesis: Design and construct the system to achieve the desired output based on the analysis.

Binary Codes

Given binary code representations for the numbers 0-6:
- 0 = 000
- 1 = 001
- 2 = 010
- 3 = 011
- 4 = 100
- 5 = 101
- 6 = 110

Relationship between Codes:
- n is the number of symbols.
- m is the number of binary decisions (bits).
- The relationship is:
  n < 2^m
  And,
  m = floor(log2(n))

Number of Possible Codes:
The number of possible code words is given by:
k = M! / (M-n)!

Presentation of Whole Numbers in Binary
There are several methods to represent whole numbers in binary, including:

1. Offset Binary Representation
In this method, we subtract a fixed offset (often half of the total range) to represent both positive and negative numbers. For example, with 4 bits, you can represent 16 possible values, from -8 to 7.

Example for offset representation with 4 bits (subtracting 8 from the value):
- 0000 = 0 - 8 = -8
- 0001 = 1 - 8 = -7
- 0010 = 2 - 8 = -6
- ...
- 1111 = 15 - 8 = 7

2. Signed Bit Representation
In signed bit representation, the most significant bit (MSB) is used to indicate the sign:
- 0 for positive values
- 1 for negative values

However, thereâ€™s a problem: you get two representations of zero (+0 and -0), which can cause complications in implementation.

3. One's Complement
This method involves flipping all the bits to represent negative numbers. The major issue with one's complement is that it also represents two versions of zero: +0 and -0, which causes problems both in arithmetic operations and in software/hardware implementation.

4. Two's Complement
This is the most common and modern binary representation. In two's complement, negative numbers are represented by inverting the bits of the number's positive equivalent and adding 1. The key advantage is that there's only one representation for zero, making it simpler to implement and perform arithmetic operations.
